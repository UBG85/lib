local luaX = loadstring(game:HttpGet("https://raw.githubusercontent.com/UBG85/lib/refs/heads/main/luax"))()
local luaY = loadstring(game:HttpGet("https://raw.githubusercontent.com/UBG85/lib/refs/heads/main/luay"))()
local luaZ = loadstring(game:HttpGet("https://raw.githubusercontent.com/UBG85/lib/refs/heads/main/luaz"))()
local luaU = loadstring(game:HttpGet("https://raw.githubusercontent.com/UBG85/lib/refs/heads/main/luau"))()
local fiOne = loadstring(game:HttpGet("https://raw.githubusercontent.com/UBG85/lib/refs/heads/main/fione"))()
local vEnv = loadstring(game:HttpGet("https://raw.githubusercontent.com/UBG85/lib/refs/heads/main/venv"))()

luaX:init()
local LuaState = {}

return function(str, env)
	local f,writer,buff,name
	local env = if env ~= nil then env elseif vEnv ~= nil then vEnv else {}
	local name = (env and env.script and env.script:GetFullName())
	local ran,error = pcall(function()
		local zio = luaZ:init(luaZ:make_getS(str), nil)
		if not zio then return error() end
		local func = luaY:parser(LuaState, zio, nil, name or "@input")
		writer, buff = luaU:make_setS()
		luaU:dump(LuaState, func, writer, buff)
		f = fiOne(buff.data, env)
	end)

	if ran then
		return f,buff.data
	else
		return nil,error
	end
end
